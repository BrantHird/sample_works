The program starts by validating the given file path and setting up variables to hold the listening address and port number. These two variables are read from the file along with the “target” file’s path and stored for later use. The listen address is read into an unsigned char array, converted to hexadecimal numbers and then stored as an unsigned int array.  The server socket is then initialised using the variables provided by the assignment specification appropriate to web protocol and this is validated by checking the return value. 

Next, the port variable is converted into an unsigned short to be used with the server socket. A socket address struct is then instantiated, with the port being assigned to the appropriate struct field (using network order) and the listen address being converted to an IP address and also stored. The socket options for the socket created are then updated such that addresses and ports are reusable (for testing purposes).

The ‘bind’ function is used to associate the assembled address struct with the created socket, binding the stored IP address and port number to the socket. The ‘listen’ function is then used to start the socket listening for client connections.

An infinite loop is now started where client connections are initiated to the socket through the ‘accept’ function and assigned to an individual pthread. This allows for multiple connections. This pthread executes the ‘thread_handler’ function, handling the client connection. 

The ‘thread_handler’ function starts a while loop, using the ‘recv’ function to ‘peek’ at data incoming from the client connection and verify that this connection has not been closed by the client. This allows for multiple requests from a single client. In the while loop, the function uses recv to acquire the header byte from the client and utilises bit shifting and bit operands to extract the type bits, compression bits and payload_size bits. Using this information, the function is able to both receive the payload and produce the appropriate response. In the case of ‘echo’, this early iteration simply sends back a copy of what was given. In the case of an error scenario (unrecognised type or incorrect bits), the function utilises the ‘error_call’ function which generates the appropriate response and closes the current client connection.

